#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã TensorRT —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""
import numpy as np
import cv2
import time
from tensorrt_streams import ParallelTensorRTManager


def create_simple_test_image():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä—É–∫–æ–π
    img = np.ones((256, 256, 3), dtype=np.uint8) * 128  # –°–µ—Ä—ã–π —Ñ–æ–Ω
    # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é "—Ä—É–∫—É" - –∫—Ä—É–≥
    cv2.circle(img, (128, 128), 50, (200, 200, 200), -1)
    return img


def test_simple_inference():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç inference"""
    print("=== –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç TensorRT inference ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_crops = [create_simple_test_image() for _ in range(2)]
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(test_crops)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    try:
        print("\n–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ParallelTensorRTManager...")
        manager = ParallelTensorRTManager(
            gesture_model_path="mobilenetv3_hand_cls.engine",
            keypoints_model_path="kps.engine"
        )
        
        if not manager.is_ready():
            print("‚úó –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return False
        
        print("‚úì –ú–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print("\n--- –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ---")
    try:
        start_time = time.time()
        gestures, keypoints = manager._predict_sequential(test_crops)
        sequential_time = time.time() - start_time
        
        print(f"‚úì –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {sequential_time:.4f}s")
        print(f"  –ñ–µ—Å—Ç—ã: {gestures}")
        print(f"  –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏: {len(keypoints)} –Ω–∞–±–æ—Ä–æ–≤")
        
        if len(gestures) == len(test_crops) and len(keypoints) == len(test_crops):
            print("‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        else:
            print("‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False
    
    # –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print("\n--- –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ---")
    try:
        start_time = time.time()
        gestures, keypoints = manager.predict_parallel(test_crops)
        parallel_time = time.time() - start_time
        
        print(f"‚úì –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {parallel_time:.4f}s")
        print(f"  –ñ–µ—Å—Ç—ã: {gestures}")
        print(f"  –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏: {len(keypoints)} –Ω–∞–±–æ—Ä–æ–≤")
        
        if len(gestures) == len(test_crops) and len(keypoints) == len(test_crops):
            print("‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        else:
            print("‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False
    
    print("\n=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ ===")
    return True


def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\n=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
    try:
        manager = ParallelTensorRTManager(
            gesture_model_path="mobilenetv3_hand_cls.engine",
            keypoints_model_path="kps.engine"
        )
        
        gestures, keypoints = manager.predict_parallel([])
        print("‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
    
    # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    try:
        print("\n–¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏...")
        manager = ParallelTensorRTManager(
            gesture_model_path="nonexistent_gesture.engine",
            keypoints_model_path="nonexistent_kps.engine"
        )
        
        if not manager.is_ready():
            print("‚úì –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π")
        else:
            print("‚ö† –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—á–∏—Ç–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã–º–∏")
            
    except Exception as e:
        print(f"‚úì –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}")


if __name__ == "__main__":
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TensorRT —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫")
    print("=" * 50)
    
    success = test_simple_inference()
    
    if success:
        test_error_handling()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ engine —Ñ–∞–π–ª–æ–≤")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π CUDA/TensorRT")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ diagnose_cuda_tensorrt.py –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
