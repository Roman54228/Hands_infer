#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º TensorRT –º–æ–¥–µ–ª–µ–π
"""
import numpy as np
import cv2
import time
from model_manager import ModelManager


def create_test_crops(num_crops: int = 4) -> list:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É–∫"""
    crops = []
    for i in range(num_crops):
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å "—Ä—É–∫–æ–π" - –ø—Ä–æ—Å—Ç–æ–π –∫—Ä—É–≥
        img = np.ones((256, 256, 3), dtype=np.uint8) * 128  # –°–µ—Ä—ã–π —Ñ–æ–Ω
        cv2.circle(img, (128, 128), 50, (200, 200, 200), -1)  # –ë–µ–ª—ã–π –∫—Ä—É–≥
        crops.append(img)
    return crops


def test_model_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ModelManager —Å CUDA streams"""
    print("=== –¢–µ—Å—Ç ModelManager —Å CUDA streams ===")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ModelManager
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ModelManager...")
        model_manager = ModelManager(
            yolo_model_path="yolo11n.engine",  # –ú–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–æ —ç—Ç–æ –æ–∫
            hand_gesture_model_path="mobilenetv3_hand_cls.engine",
            kps_model_path="kps.engine",
            use_parallel=True,
            parallel_workers=2
        )
        
        print("‚úì ModelManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if model_manager.parallel_manager is not None:
            if model_manager.parallel_manager.is_ready():
                print("‚úì CUDA streams –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                print("‚ö† CUDA streams –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback")
        else:
            print("‚ö† CUDA streams –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        
        return model_manager
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ModelManager: {e}")
        return None


def test_sequential_execution(model_manager):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
    print("\n--- –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ---")
    
    test_crops = create_test_crops(2)
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(test_crops)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        original_parallel = model_manager.use_parallel
        model_manager.use_parallel = False
        
        start_time = time.time()
        gestures, keypoints = model_manager.predict_gestures_and_keypoints(test_crops)
        sequential_time = time.time() - start_time
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        model_manager.use_parallel = original_parallel
        
        print(f"‚úì –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {sequential_time:.4f}s")
        print(f"  –ñ–µ—Å—Ç—ã: {gestures}")
        print(f"  –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏: {len(keypoints)} –Ω–∞–±–æ—Ä–æ–≤")
        
        if len(gestures) == len(test_crops) and len(keypoints) == len(test_crops):
            print("‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            return True, sequential_time
        else:
            print("‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False, sequential_time
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False, 0


def test_parallel_execution(model_manager):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
    print("\n--- –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ---")
    
    test_crops = create_test_crops(2)
    
    try:
        start_time = time.time()
        gestures, keypoints = model_manager.predict_gestures_and_keypoints(test_crops)
        parallel_time = time.time() - start_time
        
        print(f"‚úì –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {parallel_time:.4f}s")
        print(f"  –ñ–µ—Å—Ç—ã: {gestures}")
        print(f"  –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏: {len(keypoints)} –Ω–∞–±–æ—Ä–æ–≤")
        
        if len(gestures) == len(test_crops) and len(keypoints) == len(test_crops):
            print("‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            return True, parallel_time
        else:
            print("‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False, parallel_time
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False, 0


def test_performance_comparison(model_manager, sequential_time):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
    print("\n--- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---")
    
    test_crops = create_test_crops(4)
    iterations = 3
    
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å {len(test_crops)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, {iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π...")
    
    # –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    sequential_times = []
    model_manager.use_parallel = False
    for i in range(iterations):
        start_time = time.time()
        gestures, keypoints = model_manager.predict_gestures_and_keypoints(test_crops)
        sequential_times.append(time.time() - start_time)
    
    # –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    parallel_times = []
    model_manager.use_parallel = True
    for i in range(iterations):
        start_time = time.time()
        gestures, keypoints = model_manager.predict_gestures_and_keypoints(test_crops)
        parallel_times.append(time.time() - start_time)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    avg_sequential = sum(sequential_times) / len(sequential_times)
    avg_parallel = sum(parallel_times) / len(parallel_times)
    
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_sequential:.4f}s")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_parallel:.4f}s")
    
    if avg_parallel > 0:
        speedup = avg_sequential / avg_parallel
        print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")
        
        if speedup > 1.0:
            print("üéâ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–µ–µ!")
        elif speedup > 0.8:
            print("‚úì –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ö† –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –¥–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–∏—è")
    else:
        print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —É—Å–∫–æ—Ä–µ–Ω–∏–µ")


def test_error_handling(model_manager):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    print("\n--- –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ---")
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
    try:
        gestures, keypoints = model_manager.predict_gestures_and_keypoints([])
        print("‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
    
    # –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    try:
        large_crops = create_test_crops(10)
        gestures, keypoints = model_manager.predict_gestures_and_keypoints(large_crops)
        print(f"‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(large_crops)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º TensorRT")
    print("=" * 70)
    
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    model_manager = test_model_manager()
    if model_manager is None:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ModelManager")
        return
    
    # –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    seq_success, seq_time = test_sequential_execution(model_manager)
    if not seq_success:
        print("\n‚ùå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return
    
    # –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    par_success, par_time = test_parallel_execution(model_manager)
    if not par_success:
        print("\n‚ö† –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ fallback –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\nüéâ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if seq_success and par_success:
        test_performance_comparison(model_manager, seq_time)
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    test_error_handling(model_manager)
    
    print("\n" + "=" * 70)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 70)
    
    if seq_success and par_success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úì –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úì –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úì –ü—Ä–æ–±–ª–µ–º–∞ —Å cuTensor —Ä–µ—à–µ–Ω–∞")
        print("‚úì CUDA streams —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif seq_success:
        print("‚úÖ –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        print("‚úì –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚ö† –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback")
        print("‚úì –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("‚úó –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ModelManager –≤ –≤–∞—à–µ–º –∫–æ–¥–µ")
    print("2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–µ—Ç–æ–¥")
    print("3. –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    print("4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")


if __name__ == "__main__":
    main()
