#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
"""
import sys
import os

def test_tensorrt_basic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å TensorRT"""
    print("=== –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ TensorRT ===")
    
    try:
        import tensorrt as trt
        print(f"‚úì TensorRT {trt.__version__} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º logger
        logger = trt.Logger(trt.Logger.WARNING)
        print("‚úì Logger —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º builder
        builder = trt.Builder(logger)
        print("‚úì Builder —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º network
        network = builder.create_network(1 << int(trt.NetworkDefinitionCreationFlag.EXPLICIT_BATCH))
        print("‚úì Network —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º config
        config = builder.create_builder_config()
        print("‚úì Config —Å–æ–∑–¥–∞–Ω")
        
        print("‚úì –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç TensorRT –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º —Ç–µ—Å—Ç–µ TensorRT: {e}")
        return False

def test_cuda_basic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å CUDA"""
    print("\n=== –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ CUDA ===")
    
    try:
        import pycuda.driver as cuda
        import pycuda.autoinit
        print("‚úì PyCUDA –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_count = cuda.Device.count()
        print(f"‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {device_count}")
        
        if device_count > 0:
            device = cuda.Device(0)
            print(f"‚úì GPU 0: {device.name()}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
            test_array = cuda.mem_alloc(1024)
            print("‚úì –ü–∞–º—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∞")
            test_array.free()
            print("‚úì –ü–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
        
        print("‚úì –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç CUDA –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º —Ç–µ—Å—Ç–µ CUDA: {e}")
        return False

def test_polygraphy_basic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Polygraphy"""
    print("\n=== –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Polygraphy ===")
    
    try:
        from polygraphy.backend.trt import EngineFromBytes, TrtRunner
        print("‚úì Polygraphy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ engine —Ñ–∞–π–ª–æ–≤
        engine_files = ["mobilenetv3_hand_cls.engine", "kps.engine"]
        found_files = []
        
        for engine_file in engine_files:
            if os.path.exists(engine_file):
                size = os.path.getsize(engine_file) / 1024**2
                print(f"‚úì {engine_file} –Ω–∞–π–¥–µ–Ω ({size:.1f} MB)")
                found_files.append(engine_file)
            else:
                print(f"‚úó {engine_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if found_files:
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(found_files)} engine —Ñ–∞–π–ª–æ–≤")
            return True
        else:
            print("‚ö† Engine —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º —Ç–µ—Å—Ç–µ Polygraphy: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    print("=" * 40)
    
    results = {
        "TensorRT": test_tensorrt_basic(),
        "CUDA": test_cuda_basic(),
        "Polygraphy": test_polygraphy_basic()
    }
    
    print("\n" + "=" * 40)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 40)
    
    passed = 0
    for test_name, result in results.items():
        status = "‚úì –ü–†–û–ô–î–ï–ù" if result else "‚úó –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç.")
    else:
        print("‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
    
    print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π diagnose_cuda_tensorrt.py")
    print("2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ engine —Ñ–∞–π–ª—ã")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å test_tensorrt_simple.py")

if __name__ == "__main__":
    main()
