# to_onnx_to_trt.py

import torch
import torch.onnx
import numpy as np
import os
import tensorrt as trt
import pycuda.driver as cuda
import pycuda.autoinit  # <-- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CUDA –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞


IMAGE_SIZE = 256
# ==============================================================================
# 3. –ö–∞–ª–∏–±—Ä–∞—Ç–æ—Ä –¥–ª—è INT8
# ==============================================================================

class Int8Calibrator(trt.IInt8EntropyCalibrator2):
    def __init__(self, calibration_dataset, batch_size, cache_file):
        super().__init__()
        self.calibration_dataset = calibration_dataset  # —Å–ø–∏—Å–æ–∫: [array(3,256,256), ...]
        self.batch_size = batch_size
        self.current_index = 0
        self.cache_file = cache_file
        self.device_inputs = None
        self.data_shape = (3, IMAGE_SIZE, IMAGE_SIZE)

    def get_batch_size(self):
        return self.batch_size

    def get_batch(self, names):
        if self.current_index >= len(self.calibration_dataset):
            return None

        # –õ–ï–ù–ò–í–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –≤—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
        if self.device_inputs is None:
            self.device_inputs = cuda.mem_alloc(
                trt.volume(self.data_shape) * self.batch_size * np.float32().nbytes
            )

        # –°–æ–±–∏—Ä–∞–µ–º –±–∞—Ç—á
        batch = []
        for i in range(self.batch_size):
            if self.current_index >= len(self.calibration_dataset):
                break
            img = self.calibration_dataset[self.current_index]
            batch.append(img)
            self.current_index += 1

        if not batch:
            return None

        # –ù–∞ CPU: [B, 3, 256, 256]
        batch = np.ascontiguousarray(np.stack(batch)).astype(np.float32)

        # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞ GPU
        cuda.memcpy_htod(self.device_inputs, batch)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –≤—Ö–æ–¥)
        return [self.device_inputs]

    def read_calibration_cache(self):
        if os.path.exists(self.cache_file):
            with open(self.cache_file, "rb") as f:
                return f.read()
        return None

    def write_calibration_cache(self, cache):
        with open(self.cache_file, "wb") as f:
            f.write(cache)


# ==============================================================================
# 4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ TensorRT Engine
# ==============================================================================

def build_engine_onnx(
    onnx_file_path,
    engine_file_path,
    fp16_mode=True,
    int8_mode=False,
    calib_dataset=None,
    calib_batch_size=4,
    calib_cache="calibration_cache.bin"
):
    logger = trt.Logger(trt.Logger.INFO)  # INFO —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
    builder = trt.Builder(logger)
    network = builder.create_network(1 << int(trt.NetworkDefinitionCreationFlag.EXPLICIT_BATCH))
    config = builder.create_builder_config()

    # –ü–∞—Ä—Å–∏–º ONNX
    parser = trt.OnnxParser(network, logger)
    with open(onnx_file_path, "rb") as f:
        if not parser.parse(f.read()):
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ONNX:")
            for e in range(parser.num_errors):
                print(parser.get_error(e))
            return None

    # –ü–∞–º—è—Ç—å
    config.set_memory_pool_limit(trt.MemoryPoolType.WORKSPACE, 1 << 30)  # 1 GB

    # FP16
    if fp16_mode and builder.platform_has_fast_fp16:
        config.set_flag(trt.BuilderFlag.FP16)
        print("‚úÖ FP16 –≤–∫–ª—é—á—ë–Ω")

    # INT8
    if int8_mode:
        if not builder.platform_has_fast_int8:
            print("‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç INT8")
        else:
            config.set_flag(trt.BuilderFlag.INT8)
            print("‚úÖ INT8 –≤–∫–ª—é—á—ë–Ω")

            if calib_dataset is None:
                raise ValueError("INT8 —Ç—Ä–µ–±—É–µ—Ç calib_dataset")

            calibrator = Int8Calibrator(calib_dataset, calib_batch_size, calib_cache)
            #config.set_int8_calibrator(calibrator)
            config.int8_calibrator = calibrator

    # Optimization profile
    profile = builder.create_optimization_profile()
    profile.set_shape("input", min=(1, 3, IMAGE_SIZE, IMAGE_SIZE), opt=(2, 3, IMAGE_SIZE, IMAGE_SIZE), max=(4, 3, IMAGE_SIZE, IMAGE_SIZE))
    config.add_optimization_profile(profile)

    # –°—Ç—Ä–æ–∏–º engine
    print("üî® –°—Ç—Ä–æ–∏–º TensorRT engine... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1‚Äì5 –º–∏–Ω—É—Ç –ø—Ä–∏ INT8)")
    try:
        serialized_engine = builder.build_serialized_network(network, config)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ engine:", e)
        return None

    if serialized_engine is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å engine")
        return None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open(engine_file_path, "wb") as f:
        f.write(serialized_engine)
    print(f"‚úÖ TensorRT engine —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {engine_file_path}")
    return serialized_engine


# ==============================================================================
# 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–º–µ—Ä)
# ==============================================================================

def create_calibration_dataset(num_samples=200):
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    dataset = []
    for _ in range(num_samples):
        # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!
        img = np.random.uniform(0, 1, (3, IMAGE_SIZE, IMAGE_SIZE)).astype(np.float32)  # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ [0,1]
        dataset.append(img)
    return dataset


# ==============================================================================
# 6. –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
# ==============================================================================

if __name__ == "__main__":
    # –®–∞–≥ 1: ONNX

    # –®–∞–≥ 2: –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    calib_dataset = create_calibration_dataset(num_samples=200)  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!
    onnx_path = 'cls_kps.onnx'
    # –®–∞–≥ 3: –°–±–æ—Ä–∫–∞ engine
    build_engine_onnx(
        onnx_file_path=onnx_path,
        engine_file_path="cls_kps.engine",
        fp16_mode=True,
        int8_mode=False,             # <-- –≤–∫–ª—é—á–∞–µ–º INT8
        calib_dataset=calib_dataset,
        calib_batch_size=1,
        calib_cache="int8_calibration.cache"
    )

    print("üéâ –ì–æ—Ç–æ–≤–æ!")