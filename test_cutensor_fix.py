#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è cuTensor –æ—à–∏–±–æ–∫
"""
import numpy as np
import cv2
from model_manager import ModelManager

def create_test_crops(num_crops: int = 2) -> list:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É–∫"""
    crops = []
    for i in range(num_crops):
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å "—Ä—É–∫–æ–π" - –ø—Ä–æ—Å—Ç–æ–π –∫—Ä—É–≥
        img = np.ones((256, 256, 3), dtype=np.uint8) * 128  # –°–µ—Ä—ã–π —Ñ–æ–Ω
        cv2.circle(img, (128, 128), 50, (200, 200, 200), -1)  # –ë–µ–ª—ã–π –∫—Ä—É–≥
        crops.append(img)
    return crops

def test_cutensor_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ cuTensor –æ—à–∏–±–æ–∫"""
    print("=== –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è cuTensor –æ—à–∏–±–æ–∫ ===")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ModelManager
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ModelManager...")
        model_manager = ModelManager(
            yolo_model_path="upside.engine",
            hand_gesture_model_path="best_cls_kps.engine",
            kps_model_path="kps.engine",
            use_parallel=True,
            parallel_workers=2
        )
        
        print("‚úì ModelManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if model_manager.parallel_manager is not None:
            if model_manager.parallel_manager.is_ready():
                print("‚úì CUDA streams –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                print("‚ö† CUDA streams –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback")
        else:
            print("‚ö† CUDA streams –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        test_crops = create_test_crops(2)
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å {len(test_crops)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
        
        gestures, keypoints = model_manager.predict_gestures_and_keypoints(test_crops)
        
        print(f"‚úì –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(test_crops)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
        print(f"  –ü–æ–ª—É—á–µ–Ω–æ –∂–µ—Å—Ç–æ–≤: {len(gestures)}")
        print(f"  –ü–æ–ª—É—á–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫: {len(keypoints)}")
        print(f"  –ñ–µ—Å—Ç—ã: {gestures}")
        
        if len(gestures) == len(test_crops) and len(keypoints) == len(test_crops):
            print("üéâ cuTensor –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            return True
        else:
            print("‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        if "cuTensor" in str(e) or "CuTensor" in str(e):
            print("‚ö† –í—Å–µ –µ—â–µ –µ—Å—Ç—å cuTensor –æ—à–∏–±–∫–∏")
        return False

if __name__ == "__main__":
    success = test_cutensor_fix()
    if success:
        print("\n‚úÖ cuTensor –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        print("\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
